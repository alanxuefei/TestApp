package i2r.astar.edu.listener;

import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.location.Location;
import android.location.LocationListener;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.content.LocalBroadcastManager;

import org.joda.time.DateTime;
import org.joda.time.Minutes;

import java.io.IOException;

import i2r.astar.edu.global.Constant;
import i2r.astar.edu.global.GlobalState;
import i2r.astar.edu.util.Utils;
import static i2r.astar.edu.global.Constant.*;

/**
 * Created by dashm on 8/6/15.
 */
public class LocationListenerService implements LocationListener {

    // For Stay Region Extraction
    double dblStayLat = 0;
    double dblStayLon = 0;
    DateTime objStayStart;
    DateTime objLastRecord;
    double dblStayAccuracy = 0;
    double dblStayCount = 1;

    SQLiteDatabase objDB = null;

    SensorManager objDeviceSensorMgr;
    LightSensorListenerService objLightSensor;
    MediaRecorder objMediaRecorder;
    StepSensorListener objStepSensor;
    LocalBroadcastManager objBroadcast;
    Intent intent;

    public LocationListenerService(SQLiteDatabase database, SensorManager objSensorMgr,
                                   LightSensorListenerService objLightSensor, StepSensorListener
                                           objStepSensor, LocalBroadcastManager objBroadcast) {
        this.objDB = database;
        this.objDeviceSensorMgr = objSensorMgr;
        this.objLightSensor = objLightSensor;
        objMediaRecorder = new MediaRecorder();

        this.objStepSensor = objStepSensor;
        this.objBroadcast = objBroadcast;
        intent = new Intent(Constant.TRIGGERED);
    }

    private boolean setupMediaRecorder() {

        try {
            objMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
            objMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
            objMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
            objMediaRecorder.setOutputFile("/dev/null");
            objMediaRecorder.prepare();
            objMediaRecorder.start();
            objMediaRecorder.getMaxAmplitude();
        } catch (Exception e) {
            objMediaRecorder.reset();
            //e.printStackTrace();
            return false;
        }
        return true;
    }

    private void closeMediaRecorder() {
        objMediaRecorder.stop();
        objMediaRecorder.reset();
    }

    private void resetStayInfo(double dblEventLat, double dblEventLon, double dblEventAccuracy,
                               DateTime objNow) {
        dblStayLat = dblEventLat;
        dblStayLon = dblEventLon;
        dblStayAccuracy = dblEventAccuracy;
        objStayStart = objNow;
        objLastRecord = objNow;
        dblStayCount = 2;
    }

    @Override
    public void onLocationChanged(Location location) {
        System.out.println("================================================");
        double dblEventLat = location.getLatitude();
        double dblEventLon = location.getLongitude();
        double dblEventAccuracy = location.getAccuracy();
        DateTime objNow = new DateTime();

        // ===============================================================
        // Location Data
        // ===============================================================
        insertRawRecords(dblEventLat, dblEventLon, dblEventAccuracy,
                location.getProvider(), location.getAltitude(), location.getSpeed(), location
                        .getBearing());

        // ===============================================================
        // Sample Light
        // ===============================================================
        if (GlobalState.blnLightSensorServiceRunning) {
            objDeviceSensorMgr.registerListener(objLightSensor, objDeviceSensorMgr
                            .getDefaultSensor(Sensor.TYPE_LIGHT),
                    SensorManager.SENSOR_DELAY_FASTEST);
        }

        // ===============================================================
        // Determine Stay
        // ===============================================================
        if (dblStayLat == 0) {
            resetStayInfo(dblEventLat, dblEventLon, dblEventAccuracy, objNow);
        } else {
            // Check Stay
            double dblDistance = Utils.calDistance2Cells(dblStayLat,
                    dblStayLon, dblEventLat, dblStayLon);

            if (dblDistance < dblStayAccuracy + dblEventAccuracy) {

                // Update Accuaracy
                dblStayAccuracy += (dblEventAccuracy - dblStayAccuracy)
                        / dblStayCount;
                // Update Centroid
                dblStayLat += (dblEventLat - dblStayLat)
                        / dblStayCount;
                dblStayLon += (dblEventLon - dblStayLon)
                        / dblStayCount;

                ++dblStayCount;
                objLastRecord = objNow;
            } else {
                if (Minutes.minutesBetween(objStayStart, objLastRecord).getMinutes() > 60) {
                    insertStayRecords(dblStayLat, dblStayLon, objStayStart, objLastRecord,
                            dblStayAccuracy);
                }
                resetStayInfo(dblEventLat, dblEventLon, dblEventAccuracy, objNow);
            }
        }// end check stay

        // ===============================================================
        // Sound Recorder
        // ===============================================================
        try {
            boolean blnSetupResult = setupMediaRecorder();
            if (blnSetupResult) {
                Handler handler = new Handler();
                handler.postDelayed(new Runnable() {
                    public void run() {
                        //Insert into database
                        insertSoundLevel(objMediaRecorder.getMaxAmplitude());
                        closeMediaRecorder();
                        updateScreen();
                    }
                }, 5000);
            }
        } catch (Exception e) {
            objMediaRecorder = new MediaRecorder();
            //e.printStackTrace();
            System.out.println("Caught Here");
        }

        // ===============================================================
        // Step Sensor
        // ===============================================================
        if (GlobalState.blnStepSensorServiceRunning) {
//            objDeviceSensorMgr.unregisterListener(objStepSensor, objDeviceSensorMgr.getDefaultSensor
//                    (Sensor.TYPE_STEP_COUNTER));
            objStepSensor.consolidate();
//            objDeviceSensorMgr.registerListener(objStepSensor,
//                    objDeviceSensorMgr.getDefaultSensor(Sensor.TYPE_STEP_COUNTER), SensorManager
//                            .SENSOR_DELAY_NORMAL);
        }

    }

    private void insertSoundLevel(double dblSoundLevel) {
        ContentValues values = new ContentValues();
        values.put("dblValue", dblSoundLevel);
        values.put("tspRecord", Utils.getCurrentTimeStamp());
        objDB.insertOrThrow("tblSound", null, values);
    }


    private void insertStayRecords(double dblLat, double dblLon, DateTime objStart, DateTime
            objEnd, double dblAccuracy) {

        ContentValues values = new ContentValues();
        values.put("dblLat", dblLat);
        values.put("dblLon", dblLon);
        values.put("txtStartDate", objStart.toString(Constant.TIMESTAMP_FORMAT));
        values.put("txtEndDate", objEnd.toString(Constant.TIMESTAMP_FORMAT));
        values.put("dblAccuracy", dblAccuracy);
        objDB.insertOrThrow("tblStay", null, values);

    }


    private void insertRawRecords(double dblLat, double dblLon, double dblAccuracy, String
            strProvider, double dblAltitude, double dblSpeed, double dblBearing) {
        ContentValues values = new ContentValues();
        values.put("dblLat", dblLat);
        values.put("dblLon", dblLon);
        values.put("txtDate", Utils.getCurrentTimeStamp());
        values.put("txtProvider", strProvider);
        values.put("dblAccuracy", dblAccuracy);
        values.put("dblAltitude", dblAltitude);
        values.put("dblSpeed", dblSpeed);
        values.put("dblBearing", dblBearing);

        objDB.insertOrThrow(SQL_TABLE_LOCATION, null, values);
    }


    //Not used at the moment
    public void retrieveAllRecords() {
        Cursor curData = objDB.query("tblLocation", new String[]{"dblLat", "dblLon",
                "txtDate"}, null, null, null, null, null);
        curData.moveToFirst();
        int intCount = 0;

        if (!curData.isAfterLast()) {
            do {
                intCount++;
            } while (curData.moveToNext());
        }
        curData.close();
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {
    }

    @Override
    public void onProviderEnabled(String provider) {
    }

    @Override
    public void onProviderDisabled(String provider) {
    }

    public void updateScreen() {
        objBroadcast.sendBroadcast(intent);
        GlobalState.strLastTriggered = Utils.getCurrentTimeStamp();
    }

}
